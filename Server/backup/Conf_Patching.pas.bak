unit Conf_Patching;

// the patcher connects to this part and performs a version check.
// we either return that their version is current, or issue a proxy download.

interface

{$MODE DELPHI}

uses {$IFDEF Linux}FileUtil,{$ENDIF}System_Log, System_UtilExt, SysUtils, Classes;

type
  patchfile = record
    name: string;
    version: double;
    size: integer;
    data: TMemoryStream;
    bytes: TBytes;
  end;

const
  fProxy = 'deploy/'; // folder proxy, dont upload files in the same folder.

procedure initialize();
function filepos(version: double; index: integer): integer;
function filecount(version: double): integer;

var
  files: array of patchfile;
  version: double;

implementation

// get files by mask
function filepos(version: double; index: integer): integer;
var
  i: integer;
begin
  result := 0;
  try
    for i := 0 to high(files) do
      if (files[i].version > version) then
        if index > 0 then
          dec(index)
        else
        begin
          result := i;
          break;
        end;
  except
    System_Log.print('Invalid patch parameters received.', System_Log.Red);
  end;
end;

function filecount(version: double): integer;
var
  i: integer;
begin
  result := 0;

  for i := 0 to high(files) do
    if (files[i].version > version) then
      result := result + 1;
end;

// load file versions on to the file table.
procedure initialize();
var
  i: integer;
  data: TextFile;
  error: boolean;
  filever: double;
  line, name: string;
  fStream: TFileStream;
begin
  SetLength(files, 0);
  version := 0.0;
  error := false;

  print('Reading Patch.. ' + #9);

  if fileexists('conf/patch.conf') then
  begin
    try
      AssignFile(data, 'conf/patch.conf');
      reset(data);

      while not(eof(data)) do
      begin
        // parse commands, comment, section, version..
        readln(data, line);

        if (length(line) = 0) then
          continue
        else if (line[1] = '#') then begin
          print(#10 + #13 + 'Loading ' + copy(line, 2, length(line) - 1) + ' ..', Magenta);
          continue;
        end else if (line[1] = ':') and (length(line) > 1) then begin
          filever := SafeFloat(copy(line, 2, length(line) - 1));
          continue;
        end
        else
          name := line;


        if not(fileexists(fProxy + name)) then
        begin
          print(' Fatal Error. [Missing File: ' + name + ']', Red);
          error := true;
          continue;
        end
        else
        begin
          SetLength(files, length(files) + 1);
          files[high(files)].version := filever;
          files[high(files)].name := name;
          {$IFDEF Win32}
          files[high(files)].size := FileSize(fProxy + name);
          {$ELSE}
          files[high(files)].size := FileUtil.FileSize(fProxy + name);
          {$ENDIF}
          print(#9 + #9 + line + #9 + #9 +' ['+ FloatToStr(filever) + ']', Green);

          try
            fStream := TFileStream.Create(fProxy + name, fmOpenRead, 0);

            SetLength(files[high(files)].bytes, fStream.size);
            fStream.ReadBuffer(files[high(files)].bytes[0], fStream.size);
            print('Stream Sze: ' + inttostr(fStream.Size));

            FreeAndNil(fStream);
          except
            on E: Exception do
            begin
              print(' Fatal Error. [' + E.Message + ': ' + name + ']', Red);
              error := true;
              continue;
            end;
          end;

          // latest version changes.
          if (files[high(files)].version > version) then
            version := files[high(files)].version;
        end;
      end;

    finally
      closefile(data);
      // not(error) then
      //print(' Done. [' + FloatToStr(version) + ']', System_Log.LightGreen);
      print('');
    end;
  end
  else
    print(' Failed. [Missing Patch Configuration]', System_Log.Red, false);
end;

end.